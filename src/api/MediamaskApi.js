/**
 * Mediamask API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient.js";
import Error from '../model/Error.js';
import NewImage from '../model/NewImage.js';
import Templates200Response from '../model/Templates200Response.js';
import ValidationError from '../model/ValidationError.js';

/**
* Mediamask service.
* @module api/MediamaskApi
* @version 1.0.9
*/
export default class MediamaskApi {

    /**
    * Constructs a new MediamaskApi. 
    * @alias module:api/MediamaskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Render HTML for a template with dynamic layer values
     * @param {module:model/NewImage} newImage Provide the template and placeholders values that should be rendered in the image
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    htmlWithHttpInfo(newImage) {
      let postBody = newImage;
      // verify the required parameter 'newImage' is set
      if (newImage === undefined || newImage === null) {
        throw new Error("Missing the required parameter 'newImage' when calling html");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/html', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Render HTML for a template with dynamic layer values
     * @param {module:model/NewImage} newImage Provide the template and placeholders values that should be rendered in the image
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    html(newImage) {
      return this.htmlWithHttpInfo(newImage)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Render a new image
     * @param {module:model/NewImage} newImage Provide the template and placeholders values that should be rendered in the image
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    renderImageWithHttpInfo(newImage) {
      let postBody = newImage;
      // verify the required parameter 'newImage' is set
      if (newImage === undefined || newImage === null) {
        throw new Error("Missing the required parameter 'newImage' when calling renderImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['image/png', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Render a new image
     * @param {module:model/NewImage} newImage Provide the template and placeholders values that should be rendered in the image
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    renderImage(newImage) {
      return this.renderImageWithHttpInfo(newImage)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all tempaltes
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Templates200Response} and HTTP response
     */
    templatesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Templates200Response;
      return this.apiClient.callApi(
        '/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all tempaltes
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Templates200Response}
     */
    templates() {
      return this.templatesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
